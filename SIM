#!/usr/bin/python3

#NOTE: RUN FROM COMMAND LINE AS:
#python3 SIM 10 sim-traces-0-1/uniform-0-1-00.dat sim-traces-0-1/uniform-0-1-01.dat sim-traces-0-1/uniform-0-1-02.dat

#
# Stacia Near and Chin ______
# Simulation assignment
# Crosswalk sim
#

import sys
import os
from enum import Enum

#importing of the class files
from classes import safety_signals
from classes import peds 
from classes import autos
from classes import event

import argparse
try:
    import Queue as Q  # ver. < 3.0
except ImportError:
    import queue as Q

#statistical imports
import math
from random import expovariate # exponenial(lamb)
from random import normalvariate #(mu, sigma)
from random import uniform
from statistics import mean
from statistics import median
#mport matplotlib.pyplot as plt
#import numpy as np


#Global declarations

#TODO: priority queues: notation is "put" and "get"
event_list = Q.PriorityQueue()
ped_list = []
auto_list = []

n = 0;
autoTracefile = ""
pedTracefile = ""
buttonTracefile = ""
lineInAutoTrace = 0
lineInPedTrace= 0
lineInButtonTrace = 0

#static
rp = 3 #ped arrival rate in one direction
ra = 4 #auto arrival rate



def main():
    parseArgs()
    run()
    
        
def run():
    #Use globals
    global n
    global autoTracefile
    global pedTracefile
    global buttonTracefile
    #TODO: generate n aumobiles
    #TODO: generate n pedestrians
    
    t = 0 #sim_time
    
    testFileInput()
    
    #while not event_list.empty(): #event_list non empty
    #    e = event_list.pop(0)
    

def getNextAutoInterarrival():
    u = readNextUniformInTrace(traceType.AUTO)
    u = float(u)
    return -ra*math.log(1.0 - u)

def getNextPedInterarrival():
    u = readNextUniformInTrace(traceType.PED)
    u = float(u)
    return -rp*math.log(1.0 - u)

#Uniform(25,35) 
def getNextAutoSpeed():
    u = readNextUniformInTrace(traceType.AUTO)
    u = float(u)
    a = 25
    b = 35
    return a + u * (b - a)
    
#Uniform(2.6,4.1)
def getNextPedSpeed():
    u = readNextUniformInTrace(traceType.PED)
    u = float(u)
    a = 2.6
    b = 4.1
    return a + u * (b - a)

def getNext_ButtonTracefile_UniformRand():
    #TODO CONVERT TO PROBABILITY VALUE CORRECTLY
    #THIS WILL ALWAYS RETURN UNIFORM 0,1
    #YOU WILL NEED TO INTREPRET IT BASED ON STATE OF CROSSWALK
    u = readNextUniformInTrace(traceType.BUTTON)
    u = float(u)
    return u

class traceType(Enum):
    AUTO = 0
    PED = 1
    BUTTON = 2

#DO NOT CALL THIS DIRECTLY
#call using the above methods to get random values
def readNextUniformInTrace(traceCurrent):
    if not isinstance(traceCurrent, traceType):
        raise TypeError('Must be a trace type enum type')
    
    uniformRand = 0
    global autoTracefile
    global pedTracefile
    global buttonTracefile
    global lineInAutoTrace
    global lineInPedTrace
    global lineInButtonTrace
    
    if traceCurrent == traceType.AUTO:
        uniformRand = readFile(autoTracefile, lineInAutoTrace)
        lineInAutoTrace+= 1
    elif traceCurrent == traceType.PED:
        uniformRand = readFile(pedTracefile, lineInPedTrace)
        lineInPedTrace+= 1
    elif traceCurrent == traceType.BUTTON:
        uniformRand = readFile(buttonTracefile, lineInButtonTrace)
        lineInButtonTrace+= 1
    
    if (uniformRand == 0):
        print("Uniform value not returned")
        sys.exit(1)
    
    return uniformRand
        

def parseArgs():
    #TODO: must handle any problems with  argument values and exit with descriptive non zero
    #use globals!
    global autoTracefile
    global pedTracefile
    global buttonTracefile
    
    #note that "SIM" counts as an arg
    if len(sys.argv) != 5 :
        print('Number of arguments:', len(sys.argv), 'arguments.')
        print('Argument List:', str(sys.argv))
        print("Usage: python3 SIM [1 2 3 4]\n \
        1. N, the number of automobile and pedestrian arrivals to generate (N>0).\n \
        2. A Uniform(0,1) trace file of random values for automobile arrivals and speeds.\n \
        3. A Uniform(0,1) trace file of random values for pedestrian arrivals and speeds.\n \
        4. A Uniform(0,1) trace file of random values for resolving crosswalk button presses.\n")
        sys.exit (1)

    n = int(sys.argv[1])
    
    if (n <= 0):
        print("Need positive number of auto/pedestrian arrivals.")
        sys.exit(1)
    
    autoTracefile = sys.argv[2] #Uniform(0,1)
    pedTracefile = sys.argv[3] #Uniform(0,1)
    buttonTracefile = sys.argv[4] #Uniform(0,1)
    
    readFile(autoTracefile, 0)
    readFile(pedTracefile, 0)
    readFile(buttonTracefile, 0)
    
    
def readFile(filename, lineInFile):
    #filehandle = open(filename)
    #print(filehandle.read())
    #filehandle.close()
    
    fileDir = os.path.dirname(os.path.realpath('__file__'))
    filename = os.path.join(fileDir, filename)
    
    try:
        #i starts at 0
        with open(filename) as fp:
            for i, line in enumerate(fp):
                if i == lineInFile:
                    #print(line)
                    break
        
        
        if len(line.strip()) == 0 :
            raise Exception('File ended prematurely')
        
        return line

    except IOError:
        print("Could not read file:", filename)
        sys.exit(1)
    except Exception as err:
        print(err.args[0])
        sys.exit(1)
    
    
def testFileInput():

    print("Auto arrival test")
    for i in range (0,100):
        print(getNextAutoInterarrival())
    
    #25 to 35  
    print("\n\nAuto speed test")
    for i in range (0,100):
        print(getNextAutoSpeed())

    print("\n\nPed arrival test")
    for i in range (0,100):
        print(getNextPedInterarrival())
        
    #Uniform(2.6,4.1)
    print("\n\nPed speed test")
    for i in range (0,100):
        print(getNextPedSpeed())

    print("\n\nUniform button press values")
    for i in range (0,100):
        print(getNext_ButtonTracefile_UniformRand())
    

if __name__ == "__main__":
    main()

    
